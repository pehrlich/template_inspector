// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  Leap._extensionFactories = [];

  Leap._extensionInstances = [];

  Leap.service = function(name, factory) {
    if (Leap.extensionFactory(name)) {
      throw "Service \"" + name + "\" already registered";
    }
    return this._extensionFactories.push({
      name: name,
      factory: factory
    });
  };

  Leap.extensionFactory = function(extension_name) {
    var extension, _i, _len, _ref;
    _ref = Leap._extensionFactories;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      extension = _ref[_i];
      if (extension.name === extension_name) {
        return extension.factory;
      }
    }
  };

  Leap.Controller.prototype.use = function() {
    var callback, controller, extensionFactory, extension_name, options, run_callback, step, type, _fn, _ref;
    extension_name = arguments[0], options = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    extensionFactory = Leap.extensionFactory(extension_name);
    if (!extensionFactory) {
      throw "Leap Service \"" + extension_name + "\" not found.";
    }
    options || (options = {});
    run_callback = typeof options["if"] === 'undefined' || options["if"];
    delete options["if"];
    step = void 0;
    controller = this;
    _ref = extensionFactory(options);
    _fn = function(type) {
      return step = function(frame) {
        var dependencies, dependency, _i, _len;
        dependencies = (function() {
          switch (type) {
            case 'frame':
              return [frame];
            case 'hand':
              return frame.hands || [];
          }
        })();
        for (_i = 0, _len = dependencies.length; _i < _len; _i++) {
          dependency = dependencies[_i];
          if ((angular.isFunction(run_callback) && run_callback.call(controller, dependency)) || run_callback) {
            callback.call(controller, dependency);
          }
        }
        return frame;
      };
    };
    for (type in _ref) {
      callback = _ref[type];
      _fn(type);
    }
    if (this._preregisteredExtensions[extension_name]) {
      this.stopUsing(this._preregisteredExtensions[extension_name]);
      delete this._preregisteredExtensions[extension_name];
    }
    this._registeredExtensions[extension_name] = step;
    return this.addStep(step);
  };

  Leap.Controller.prototype.setupServices = function() {
    var extension, _i, _len, _ref, _results;
    this._registeredExtensions = {};
    this._preregisteredExtensions = {};
    _ref = Leap._extensionFactories;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      extension = _ref[_i];
      _results.push(this._preregisteredExtensions[extension.name] = this.use(extension.name));
    }
    return _results;
  };

  Leap.Controller.prototype.stopUsing = function(stepOrName) {
    return this.removeStep((angular.isFunction(stepOrName) && stepOrName) || Leap._registeredExtensions[stepOrName]);
  };

  Leap.Controller.prototype.removeStep = function(step) {
    return this.steps.splice(this.steps.indexOf(step), 1);
  };

}).call(this);
