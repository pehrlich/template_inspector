// Generated by CoffeeScript 1.6.3
(function() {
  var open_gesture_contants, position_constants;

  position_constants = {
    scale: 8,
    vertial_offset: -150
  };

  open_gesture_contants = {
    tips_at: 50,
    min_tip: 0.3,
    max_tip: 1.3
  };

  app.directive('hand', [
    'Leap', function(Leap) {
      return {
        restrict: 'A',
        scope: {
          id: '=hand'
        },
        link: function(scope, elem, attrs) {
          scope.open = void 0;
          scope.old_open_percent = void 0;
          elem.bind('$destroy', function() {
            return scope.$destroy();
          });
          scope.$watch(function() {
            return Leap.lastValidFrame.hands;
          }, function(newHands, oldHands) {
            if (newHands.length) {
              if (!(scope.hand = newHands.getById(scope.id))) {
                return;
              }
              scope.setPosition();
              return scope.setOpenGesture();
            }
          });
          scope.setOpenGesture = function() {
            var new_open_percent;
            new_open_percent = Math.round((Math.abs(scope.hand.roll()) - open_gesture_contants.min_tip) / (open_gesture_contants.max_tip - open_gesture_contants.min_tip) * 100);
            if (new_open_percent !== scope.old_open_percent) {
              scope.old_open_percent = new_open_percent;
              scope.$emit('openPercent', new_open_percent);
              if (scope.open && new_open_percent < open_gesture_contants.tips_at) {
                scope.open = false;
                scope.$emit('close');
              }
              if (!scope.open && new_open_percent >= open_gesture_contants.tips_at) {
                scope.open = true;
                return scope.$emit('open');
              }
            }
          };
          scope.setPosition = function() {
            scope.x = (document.body.offsetWidth / 2) + (scope.hand.palmPosition[0] * position_constants.scale);
            scope.y = (document.body.offsetHeight / 2) + ((scope.hand.palmPosition[1] + position_constants.vertial_offset) * position_constants.scale * -1);
            elem[0].style.left = "" + scope.x + "px";
            return elem[0].style.top = "" + scope.y + "px";
          };
          return scope.topMostElement = function() {
            var originalZ, topMostElement;
            originalZ = elem[0].style.zIndex;
            elem[0].style.zIndex = -1;
            topMostElement = document.elementFromPoint(scope.x, scope.y);
            elem[0].style.zIndex = originalZ;
            return topMostElement;
          };
        }
      };
    }
  ]);

}).call(this);
